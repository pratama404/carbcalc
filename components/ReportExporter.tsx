'use client'

import { useState } from 'react'
import { Download, FileText, Table, Mail } from 'lucide-react'
import { generatePDFReport, generateCSVReport, ReportData } from '@/lib/reportGenerator'
import { calculateAQI, analyzeAirQualityImpact } from '@/lib/airQuality'

interface ReportExporterProps {
  userData: {
    name: string
    email: string
  }
  carbonData: any
  historicalData: any[]
  recommendations: string[]
}

export default function ReportExporter({ userData, carbonData, historicalData, recommendations }: ReportExporterProps) {
  const [loading, setLoading] = useState(false)
  const [exportType, setExportType] = useState<'pdf' | 'csv'>('pdf')

  const prepareReportData = (): ReportData => {
    // Calculate trend
    const trend = historicalData.length > 1 ? 
      ((carbonData.total - historicalData[1].totalCO2) / historicalData[1].totalCO2) * 100 : 0

    // Mock air quality data
    const mockPollutants = {
      pm25: 25 + (carbonData.total * 2),
      pm10: 40 + (carbonData.total * 3),
      o3: 60,
      no2: 30
    }
    
    const aqiData = calculateAQI(mockPollutants)
    const airQualityImpact = analyzeAirQualityImpact(carbonData)

    return {
      user: {
        name: userData.name,
        email: userData.email,
        period: `Last 30 days (${historicalData.length} entries)`
      },
      carbonFootprint: {
        total: carbonData.total,
        breakdown: carbonData.breakdown,
        trend: trend,
        entries: historicalData
      },
      airQuality: {
        aqi: aqiData.aqi,
        level: aqiData.level,
        impact: airQualityImpact
      },
      recommendations: recommendations,
      achievements: [
        'Completed carbon footprint assessment',
        `Tracked ${historicalData.length} daily entries`,
        trend < 0 ? `Reduced emissions by ${Math.abs(trend).toFixed(1)}%` : 'Baseline established for improvement'
      ].filter(Boolean)
    }
  }

  const handleExport = async () => {
    setLoading(true)
    try {
      const reportData = prepareReportData()
      
      if (exportType === 'pdf') {
        const pdfBlob = await generatePDFReport(reportData)
        const url = URL.createObjectURL(pdfBlob)
        const a = document.createElement('a')
        a.href = url
        a.download = `carbon-footprint-report-${new Date().toISOString().split('T')[0]}.pdf`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
      } else {
        const csvContent = generateCSVReport(reportData)
        const blob = new Blob([csvContent], { type: 'text/csv' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `carbon-footprint-report-${new Date().toISOString().split('T')[0]}.csv`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
      }
    } catch (error) {
      console.error('Export failed:', error)
      alert('Failed to generate report. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const handleEmailReport = async () => {
    const reportData = prepareReportData()
    const subject = `Carbon Footprint Report - ${new Date().toLocaleDateString()}`
    const body = `Hi ${userData.name},

Here's your carbon footprint summary:

Total CO2 Emissions: ${reportData.carbonFootprint.total.toFixed(2)} kg
Trend: ${reportData.carbonFootprint.trend > 0 ? '+' : ''}${reportData.carbonFootprint.trend.toFixed(1)}%

Breakdown:
- Transportation: ${reportData.carbonFootprint.breakdown.transportation.toFixed(2)} kg CO2
- Energy: ${reportData.carbonFootprint.breakdown.energy.toFixed(2)} kg CO2
- Food: ${reportData.carbonFootprint.breakdown.food.toFixed(2)} kg CO2
- Waste: ${reportData.carbonFootprint.breakdown.waste.toFixed(2)} kg CO2

Air Quality Impact:
- AQI: ${reportData.airQuality.aqi}
- Level: ${reportData.airQuality.level.label}
- Personal Score: ${reportData.airQuality.impact.airQualityScore.toFixed(0)}/100

Top Recommendations:
${reportData.recommendations.slice(0, 3).map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

Generated by Carbon Calculator App
Visit: https://carbcalc.app`

    const mailtoLink = `mailto:${userData.email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`
    window.open(mailtoLink)
  }

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-gray-900 flex items-center">
          <Download className="w-6 h-6 text-green-500 mr-2" />
          Export Report
        </h3>
      </div>

      <div className="space-y-4">
        {/* Export Type Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Report Format
          </label>
          <div className="flex space-x-4">
            <label className="flex items-center">
              <input
                type="radio"
                value="pdf"
                checked={exportType === 'pdf'}
                onChange={(e) => setExportType(e.target.value as 'pdf' | 'csv')}
                className="mr-2"
              />
              <FileText className="w-4 h-4 mr-1" />
              PDF Report
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                value="csv"
                checked={exportType === 'csv'}
                onChange={(e) => setExportType(e.target.value as 'pdf' | 'csv')}
                className="mr-2"
              />
              <Table className="w-4 h-4 mr-1" />
              CSV Data
            </label>
          </div>
        </div>

        {/* Report Preview */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium text-gray-900 mb-2">Report Contents:</h4>
          <ul className="text-sm text-gray-600 space-y-1">
            <li>• Carbon footprint summary and trends</li>
            <li>• Detailed breakdown by category</li>
            <li>• Air quality impact analysis</li>
            <li>• Personalized recommendations</li>
            <li>• Historical data ({historicalData.length} entries)</li>
            <li>• Achievement highlights</li>
          </ul>
        </div>

        {/* Export Buttons */}
        <div className="flex space-x-3">
          <button
            onClick={handleExport}
            disabled={loading}
            className="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center justify-center"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
            ) : (
              <Download className="w-4 h-4 mr-2" />
            )}
            {loading ? 'Generating...' : `Download ${exportType.toUpperCase()}`}
          </button>
          
          <button
            onClick={handleEmailReport}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
          >
            <Mail className="w-4 h-4 mr-2" />
            Email
          </button>
        </div>

        <div className="text-xs text-gray-500 text-center">
          Reports include the last 30 days of data and are generated in real-time
        </div>
      </div>
    </div>
  )
}