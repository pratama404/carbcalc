import jsPDF from 'jspdf'
import 'jspdf-autotable'

export interface ReportData {
  user: {
    name: string
    email: string
    period: string
  }
  carbonFootprint: {
    total: number
    breakdown: {
      transportation: number
      energy: number
      food: number
      waste: number
    }
    trend: number
    entries: any[]
  }
  airQuality: {
    aqi: number
    level: any
    impact: any
  }
  recommendations: string[]
  achievements: string[]
}

export function generatePDFReport(data: ReportData): Promise<Blob> {
  return new Promise((resolve) => {
    const doc = new jsPDF()
    
    // Header
    doc.setFontSize(20)
    doc.setTextColor(34, 139, 34)
    doc.text('Carbon Footprint Report', 20, 30)
    
    doc.setFontSize(12)
    doc.setTextColor(0, 0, 0)
    doc.text(`Generated for: ${data.user.name}`, 20, 45)
    doc.text(`Period: ${data.user.period}`, 20, 55)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 65)
    
    // Carbon Footprint Summary
    doc.setFontSize(16)
    doc.setTextColor(34, 139, 34)
    doc.text('Carbon Footprint Summary', 20, 85)
    
    doc.setFontSize(12)
    doc.setTextColor(0, 0, 0)
    doc.text(`Total CO2 Emissions: ${data.carbonFootprint.total.toFixed(2)} kg`, 20, 100)
    doc.text(`Trend: ${data.carbonFootprint.trend > 0 ? '+' : ''}${data.carbonFootprint.trend.toFixed(1)}%`, 20, 110)
    
    // Breakdown table
    const breakdownData = [
      ['Category', 'Emissions (kg CO2)', 'Percentage'],
      ['Transportation', data.carbonFootprint.breakdown.transportation.toFixed(2), `${((data.carbonFootprint.breakdown.transportation / data.carbonFootprint.total) * 100).toFixed(1)}%`],
      ['Energy', data.carbonFootprint.breakdown.energy.toFixed(2), `${((data.carbonFootprint.breakdown.energy / data.carbonFootprint.total) * 100).toFixed(1)}%`],
      ['Food', data.carbonFootprint.breakdown.food.toFixed(2), `${((data.carbonFootprint.breakdown.food / data.carbonFootprint.total) * 100).toFixed(1)}%`],
      ['Waste', data.carbonFootprint.breakdown.waste.toFixed(2), `${((data.carbonFootprint.breakdown.waste / data.carbonFootprint.total) * 100).toFixed(1)}%`]
    ]
    
    ;(doc as any).autoTable({
      head: [breakdownData[0]],
      body: breakdownData.slice(1),
      startY: 125,
      theme: 'grid',
      headStyles: { fillColor: [34, 139, 34] }
    })
    
    // Air Quality Analysis
    let yPos = (doc as any).lastAutoTable.finalY + 20
    doc.setFontSize(16)
    doc.setTextColor(34, 139, 34)
    doc.text('Air Quality Impact', 20, yPos)
    
    yPos += 15
    doc.setFontSize(12)
    doc.setTextColor(0, 0, 0)
    doc.text(`Estimated AQI Impact: ${data.airQuality.aqi}`, 20, yPos)
    doc.text(`Air Quality Level: ${data.airQuality.level.label}`, 20, yPos + 10)
    doc.text(`Personal Air Quality Score: ${data.airQuality.impact.airQualityScore.toFixed(0)}/100`, 20, yPos + 20)
    
    // Recommendations
    yPos += 40
    doc.setFontSize(16)
    doc.setTextColor(34, 139, 34)
    doc.text('Recommendations', 20, yPos)
    
    yPos += 15
    doc.setFontSize(12)
    doc.setTextColor(0, 0, 0)
    data.recommendations.slice(0, 5).forEach((rec, index) => {
      doc.text(`${index + 1}. ${rec}`, 25, yPos + (index * 10))
    })
    
    // Achievements
    if (data.achievements.length > 0) {
      yPos += data.recommendations.length * 10 + 20
      doc.setFontSize(16)
      doc.setTextColor(34, 139, 34)
      doc.text('Achievements', 20, yPos)
      
      yPos += 15
      doc.setFontSize(12)
      doc.setTextColor(0, 0, 0)
      data.achievements.forEach((achievement, index) => {
        doc.text(`âœ“ ${achievement}`, 25, yPos + (index * 10))
      })
    }
    
    // Footer
    doc.setFontSize(10)
    doc.setTextColor(128, 128, 128)
    doc.text('Generated by Carbon Calculator App', 20, 280)
    doc.text('Visit us at: https://carbcalc.app', 20, 290)
    
    const pdfBlob = doc.output('blob')
    resolve(pdfBlob)
  })
}

export function generateCSVReport(data: ReportData): string {
  const csvData = [
    ['Carbon Footprint Report'],
    ['User', data.user.name],
    ['Email', data.user.email],
    ['Period', data.user.period],
    ['Generated', new Date().toLocaleDateString()],
    [''],
    ['Carbon Footprint Summary'],
    ['Total CO2 (kg)', data.carbonFootprint.total.toFixed(2)],
    ['Trend (%)', data.carbonFootprint.trend.toFixed(1)],
    [''],
    ['Breakdown by Category'],
    ['Category', 'Emissions (kg CO2)', 'Percentage'],
    ['Transportation', data.carbonFootprint.breakdown.transportation.toFixed(2), `${((data.carbonFootprint.breakdown.transportation / data.carbonFootprint.total) * 100).toFixed(1)}%`],
    ['Energy', data.carbonFootprint.breakdown.energy.toFixed(2), `${((data.carbonFootprint.breakdown.energy / data.carbonFootprint.total) * 100).toFixed(1)}%`],
    ['Food', data.carbonFootprint.breakdown.food.toFixed(2), `${((data.carbonFootprint.breakdown.food / data.carbonFootprint.total) * 100).toFixed(1)}%`],
    ['Waste', data.carbonFootprint.breakdown.waste.toFixed(2), `${((data.carbonFootprint.breakdown.waste / data.carbonFootprint.total) * 100).toFixed(1)}%`],
    [''],
    ['Air Quality Analysis'],
    ['AQI Impact', data.airQuality.aqi],
    ['Air Quality Level', data.airQuality.level.label],
    ['Personal Score', data.airQuality.impact.airQualityScore.toFixed(0)],
    [''],
    ['Recommendations'],
    ...data.recommendations.map(rec => [rec])
  ]
  
  return csvData.map(row => row.join(',')).join('\n')
}